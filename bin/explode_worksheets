#!/usr/bin/perl

# License: GPL
# Copyright: University of Southampton 2011,2012
# Author: Christopher Gutteridge; http://id.ecs.soton.ac.uk/person/1248

use FindBin;
use lib "$FindBin::Bin/../perl_lib";

use strict;
use warnings;

use Getopt::Long;

my %options = ( 
	worksheet=>undef,
	output=>"csv",
);

Getopt::Long::Configure("permute");

my $outputs = {
	"csv"=>{
		suffix=>"csv",
		fn_open  => \&open_utf8,
		fn_close => \&close_utf8,
		fn_write_row => \&write_csv_row,
	},
	"tsv"=>{
		suffix=>"tsv",
		fn_open  => \&open_utf8,
		fn_close => \&close_utf8,
		fn_write_row => \&write_tsv_row,
	},
};

my $show_help;
my $show_version;
my $verbose;
my $quiet;
GetOptions( 
	'help|?' => \$show_help,
	'version' => \$show_version,

	'verbose+' => \$verbose,
	'quiet' => \$quiet,

	'worksheet=i' => \$options{"worksheet"},
	'output=s' => \$options{"output"},
) || show_usage();
#use Data::Dumper;print Dumper( \%options );exit;

sub show_help 
{
	print "$0 filename.xls\n";
	print "$0 --worksheet N filename.xls > out.csv\n";
	exit;
}
sub show_usage 
{
	print <<END;

To explode an excel file into it's worksheets as CSV:
$0 filename.xls
... will produce filename.xls.1.csv, filename.xls.2.csv, filename.xls.3.csv, ...

Option --worksheet N
$0 --worksheet 3 filename.xls 
... will stream the 3rd worksheet in the spreadsheet to STDOUT as CSV.

Option --output FORMAT 
  for tab seperated values. If exploding files will be named
  .tsv instead of .csv
  Supported output formats: csv, tsv
  tsv format is lossy as it will convert \\n \\r and \\t in the cells into 
  normal spaces.

END
	exit;
}

show_version() if $show_version;

show_help() if $show_help;

show_usage() if( !defined $outputs->{ $options{output} } );

my $output = $outputs->{ $options{output} };

show_usage() if( scalar @ARGV != 1 ); 

$options{noise} = 0 if( $quiet );
$options{noise} = 1+$verbose if( $verbose );


my $in = $ARGV[0];


my $format = "xls";
if( $in=~m/\.xlsx$/ ) { $format = "xlsx"; }




my $workbook;

if( $format eq "xlsx" )
{
	if( ! eval 'use Spreadsheet::XLSX; 1;' ) 
	{
		error( "Failed to load Perl Module: Spreadsheet::XLSX: $@" );
	}	
	if( ! eval 'use Text::Iconv; 1;' ) 
	{
		error( "Failed to load Perl Module: Text::Iconv: $@" );
	}	
 	my $converter = Text::Iconv -> new ("utf-8", "windows-1251");
	
	no warnings; 
	$workbook = Spreadsheet::XLSX->new( $in, $converter );
	use warnings; 
	if ( !defined $workbook ) 
	{
		error( "Failed to parse XLSX file $in." );
	}
}
else
{
	if( ! eval 'use Spreadsheet::ParseExcel; 1;' ) 
	{
		error( "Failed to load Perl Module: Spreadsheet::ParseExcel: $@" );
	}	
	my $parser = Spreadsheet::ParseExcel->new();
	$workbook = $parser->parse( $in );
	if ( !defined $workbook ) 
	{
		die "Failed to parse Excel file: ".$parser->error();
	}
}

my @worksheets = $workbook->worksheets();

if( defined $options{worksheet} && $options{worksheet} )
{
	# stream single worksheet to STDOUT
	output_worksheet( $worksheets[ $options{worksheet}-1 ], *STDOUT, $output->{fn_write_row} );
}
else
{
	# normal explode
	for( my $i=0;$i<scalar @worksheets;++$i )
	{
		my $worksheet = $worksheets[$i];	
		my $fn= "$in.".($i+1).".".$output->{suffix};
		my $fh = &{$output->{fn_open}}( $fn );
		output_worksheet( $worksheets[ $i ], $fh, $output->{fn_write_row} );
		&{$output->{fn_close}}($fh);
		close $fh;
	}
}

exit;

sub write_tsv_row
{
	my( $fh, $cells ) = @_;

	my @cleaned_cells = ();
	foreach my $cell ( @$cells ) 
	{
		$cell = "" if !defined $cell;
		$cell =~ s/[\t\n\r]/ /g;
		push @cleaned_cells, $cell;
	}

	print $fh join( "\t", @cleaned_cells )."\n";
}


sub write_csv_row
{
	my( $fh, $cells ) = @_;

	my @cleaned_cells = ();
	foreach my $cell ( @$cells ) 
	{
		$cell =~ s/"/""/g;
		push @cleaned_cells, '"'.$cell.'"';
	}

	print $fh join( ',', @cleaned_cells )."\n";
}

sub open_utf8
{
	my( $filename ) = @_;

	open( my $fh, ">:utf8", $filename ) || die "Can't write $filename: $!";
	return $fh;
}

sub close_utf8
{
	my( $fh ) = @_;

	close $fh;
}

sub output_worksheet
{
	my( $worksheet, $fh, $fn_write_row ) = @_;
	
	my ( $row_min, $row_max ) = $worksheet->row_range();
	my ( $col_min, $col_max ) = $worksheet->col_range();
	
	for my $row ( 0 .. $row_max ) 
	{
		my @cells = ();
		for my $col ( 0 .. $col_max ) 
		{
			my $cell = $worksheet->get_cell( $row, $col );
			my $value= "";
			if( $cell ) { $value = $cell->value; }
			# not checking for undef, individual writers may
			# want to use undef and "" 
			push @cells, $value;
		}
		&{$fn_write_row}( $fh, \@cells );
	}
}

sub error
{
	my( $msg ) = @_;

	print STDERR "$msg\n";
	exit 1;
}
